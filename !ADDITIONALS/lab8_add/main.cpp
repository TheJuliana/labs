/*Создайте класс. Разбейте его реализацию на файлы *.hpp и *.cpp. Приведите пример использования класса.

Принцип ООП №1 (из 4-х) - Абстракция
Вы будете самостоятельно придумывать, какие поля и методы разместить классе для решения вашей задачи. Ими вы опишите геометрическую фигуру из вашей задачи. Такое описание называется абстракцией.

Принцип ООП №2 (из 4-х) - Инкапсуляция
Вам следует предусмотреть проверку вводимых данных. Например, нельзя ввести отрицательную длину прямоугольника. Если же пользователь это сделал, выведите предупреждение и заменить длину на значение по умолчанию (например, 1, можно выбрать любое).
Для вас это будет сделать несложно, т.к. пользователь напрямую не может обратиться к полям класса, они имеют ограничение доступа private.
И обращаться он будет только через методы public, либо конструктор. Там и разместите проверку.
Из всех полей и методов класса дать пользователю только то, что он не может сломать и что достаточно для выполнения задачи, а к остальному доступ запретить – это есть инкапсуляция.

Вариант-7. 
Создайте класс, описывающий параллелограмм. Найдите его периметр и площадь.
*/

#include <iostream>
#include "parallelogram.hpp"
int main() {
    int width, height, angle;
    std::cout <<"Enter the length, width and "
                "angle between the adjacent sides"
                " of the parallelogram" << std::endl;
    std::cin >> width >> height >> angle;
    shapes::Parallelogram parallelogram(width, height, angle);
    std::cout << "S of your parallelogram =  " << parallelogram.Square() << std::endl;
    std::cout << "P of your parallelogram =  " << parallelogram.Perimeter() << std::endl;

    return 0;
}
